#!/usr/bin/perl

# Copyright (c) 2014 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use warnings;
use strict;

sub usage
{
	printf STDERR "must define -x <command> to access the wallet\n";
	printf STDERR "must define -o <addr>:pct[,addr:pct] to send funds\n";
	exit(1);
}


use JSON;

use OpenBSD::Getopt;

our $opt_b;		# blacklist of txhash to not use, comma separated
our $opt_c;		# conf file
our $opt_v;		# verbose

$opt_c = $ENV{'HOME'}."/.checkbtc.conf";

getopts('b:c:o:v');

our @txblacklist;
if (defined($opt_b)) {
	@txblacklist = split(/,/,$opt_b);
}

our %walletcmds;
our %addrname;
our %addrlist;
our %addrwallet;
our $usdperbtc = "377.00"; # random value, over-ride in config

if ( -f $opt_c ) {
	eval `cat $opt_c`;
	if ($@) {
		print "Error: ".$@."\n";
	}
}

foreach my $name (keys %addrlist) {
	#print "addrlist ele1 is a ".ref($addrlist{$name})."\n";
	foreach my $a (@{$addrlist{$name}}) {
		#print "addrlist ele2 is a ".ref($a)."\n";
		$addrname{$a} = $name;
	}
}

my %addrs;
foreach my $key (keys %walletcmds) {
	my $opt_x = $walletcmds{$key};
	printf "=> %s\n", $opt_x;
	print  "  - getaddressbyaccount\n";

	my $line;
	my $text = "";
	my $json = JSON->new->allow_nonref;
	my $parsed;

	open(U,"${opt_x} getaddressesbyaccount '' 2> /dev/null |");
	while(<U>) {
		chomp($line = $_);
		$text .= $line;
	}
	close(U);
	eval {
		$parsed = $json->decode( $text );
	};
	if ($@) {
		print "Error: ".$@."\n";
		next;
	}

	#print $json->pretty->encode( $parsed );
	if (ref($parsed) ne "ARRAY") {
		print "Error somewhere, parsed ref = ".ref($parsed)."\n";
		exit(1);
	}

	foreach my $addr (@{$parsed}) {
		my $type = ref($addr);
		if (length($type) > 0) {
			printf "   addr is a %s\n", ref($addr);
			next;
		}
		#printf "  addr: %s\n", $addr;
		if (!defined($addrs{$addr})) {
			$addrs{$addr} = 0.0;
			$addrwallet{$addr} = $key;
		}
	}


	print  "  - listunspent\n";
	$line = undef;
	$text = "";
	open(U,"${opt_x} listunspent 2> /dev/null |");
	while(<U>) {
		chomp($line = $_);
		$text .= $line;
	}
	close(U);

	eval {
		$parsed = $json->decode( $text );
	};
	if ($@) {
		print "Error: ".$@."\n";
		next;
	}

	#print $json->pretty->encode( $parsed );

	if (ref($parsed) ne "ARRAY") {
		print "Error somewhere, parsed ref = ".ref($parsed)."\n";
		exit(1);
	}

	my @txsend = ();
	my $txcount = 0;
	my $txvalue = 0.00000000;
	TX:
	foreach my $tx (@{$parsed}) {
		if (ref($tx) ne "HASH") {
			print "Error somewhere, parsed tx = ".ref($tx)."\n";
			exit(1);
		}
		foreach my $txb (@txblacklist) {
			if ($txb eq $tx->{'txid'}) {
				next TX;
			}
		}
		$txcount++;
		if (defined($opt_v)) {
		    foreach my $var (sort keys %{$tx}) {
			printf "%02d: '%s' = '%s'\n", $txcount, $var, $tx->{$var};
		    }
		}
		my $address = $tx->{'address'};
		if (defined($addrs{$address})) {
			$addrs{$address} += $tx->{'amount'};
		} else {
			$addrs{$address} = $tx->{'amount'};
			$addrwallet{$address} = $key;
		}
	}
	print "All unspent inputs total: ".$txvalue."\n";
	print "Wallets balance: ".`${opt_x} getbalance`."\n";
}

my $total = 0.0;

foreach my $a (sort keys %addrs) {
	my $name = $addrname{$a};
	if (!defined($name)) {
		$name = $addrwallet{$a}.":?";
	}
	my $usd = $usdperbtc * $addrs{$a};
	#printf "  %20s: %0.8f BTC  \$%6.2f USD  (%s)\n",$a,$addrs{$a},$usd,$name;
	printf " %-20s... %0.8f BTC  \$%6.2f USD  (%s)\n",$name,$addrs{$a},$usd,$a;
	$total += $addrs{$a};
}

printf " %-20s... %0.8f BTC  \$%6.2f USD\n","TOTAL",$total,$total * $usdperbtc;
